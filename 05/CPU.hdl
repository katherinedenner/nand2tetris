// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
                         //i  x  x  a  c  c  c  c  c  c  d  d  d  j  j  j
                         //15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 0
                         // i: op code
                         // xx:
                         // a comp
                         // c comp (ALU control codes)
                         // d dest
                         // j jump
                                // jump codes (zr, ng)
                                // 000 nil no jump  ()
                                // 001 JGT out > 0  (0,0)
                                // 010 JEQ ==       (1,0)
                                // 011 JGE >=       (1,0)
                                // 100 JLT <=       (0,1)
                                // 101 JNE !=       (0,0) (0,1)
                                // 110 JLE <        (0,1) (1,0)
                                // 111 JMP yep      (1,0) (0,0) (0,1)
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // A-Register
    Not(in=instruction[15], out=notOp); // instruction if i = 0
    Mux16(a=aluOut, b=instruction, sel=notOp, out=aRegIn);
    Or(a=notOp, b=instruction[5], out=loadA);
    ARegister(in=aRegIn, load=loadA, out=aRegOut, out[0..14]=addressM);

    // D-Register
    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=aluOut, load=loadD, out=dRegOut);

    //ALU
    And(a=instruction[15], b=instruction[12], out=aluInput);
    Mux16(a=aRegOut, b=inM, sel=aluInput, out=aluInA);
    ALU(x=dRegOut, y=aluInA, 
    zx=instruction[11], 
    nx=instruction[10], 
    zy=instruction[9], 
    ny=instruction[8], 
    f=instruction[7], 
    no=instruction[6], 
    out=aluOut, out=outM, zr=zr, ng=ng);

    //writeM
    And(a=instruction[15], b=instruction[3], out=writeM);

    // PC
    // determine whether to jump
    Or(a=zr, b=ng, out=le); // checks whether ALU output <= 0
    Not(in=le, out=positive); // checks whether ALU output >0
    And(a=instruction[0], b=positive, out=positiveJ);
    And(a=instruction[1], b=zr, out=zeroJ);
    And(a=instruction[2], b=ng, out=negativeJ);
    Or(a=positiveJ, b=zeroJ, out=jumpOr);
    Or(a=jumpOr, b=negativeJ, out=jump);
    And(a=jump, b=instruction[15], out=jump15);

    PC(in=aRegOut, load=jump15, inc=true, reset=reset, out[0..14]=pc) ;

}